mysql查询最大连接数：

​	show variables like '%max_connections%'

可以看到，一个mysql服务器只能同时承受151个连接，最大连接数指的是能同时与mysql数据库建立连接的客户数量，对于每个连接，都要分配一定的内存空间，语句缓存，大量连接会影响数据库的性能，导致内存不足。

​	![image-20240624201517864](C:\Users\19116\AppData\Roaming\Typora\typora-user-images\image-20240624201517864.png)

```
MySQL的连接数指的是同时连接到数据库服务器的客户端数量。当有大量的用户或应用程序同时访问数据库时，这些连接数会直接影响服务器的性能和资源使用情况。MySQL通过配置文件（my.cnf 或者在Windows上是my.ini）中的max_connections参数来设定最大并发连接数。

max_connections：这是MySQL服务器能够接受的最大同时连接数。超过这个值，新的连接请求将被拒绝，除非有旧连接断开。
wait_timeout：如果一个连接长时间没有活动，MySQL会自动断开这样的连接，避免资源浪费。
innodb_thread_concurrency: 对InnoDB引擎来说，这个参数控制了并发事务的数量，而不是总连接数。
```

单机数据库的存储容量和连接数都是有限的，表的数据量在百万内时，可以采用索引，从库来优化性能，但是当数据量达到千万时，就需要用到分表技术。一个数据库只能使用100多个连接，因此单击数据库无法满足高并发要求。常用措施是垂直分库水平分表。

分表的好处：

​	大表会带来查询性能下降，锁竞争激烈，增删改语句性能降低，备份恢复时间变长的坏处。一般超过500W行或者数据量超过2GB时就要分表。

​	分表：垂直分表，水平分表。

​	水平分表的依据：hash取模

​	垂直分表：冷热数据分离，将原表分为主表和扩展表。拆表后，如果出现大量的连表查询，就说明拆分不合理。

分库：

​	高并发场景下，由于数据库本身的连接是一定的。过多的并发降低服务的性能。因此要进行分库，转库专用，提供更多的数据库连接。提升系统的并发度。

​	分库：垂直分库，水平分库。垂直分库针对的是数据类型，水平分库针对的是数据大小。水平分库可有效地环节单击和单库的性能瓶颈，突破Io,连接数等硬件资源的限制。

​	水平分库的规则：根据主键hash取模，即id%n(库的实例)，根据余数来确定是哪个表。

结论： 数据量大的时候要分表，并发量大的时候要分库。高并发大数据量时要分库分表。

分库分表的算法：

​	垂直拆分是根据业务来的。没有算法。拆分算法指的就是水平分库分表。

​	1.范围分片：

​		1.时间维度

​		如日志表，订单表，是按照时间来划分的

​		2.地域维度

​		如天气表，是根据省，市行政区来进行划分。

​		3.大小维度

​		常见的事用户表，0~1000w的用户在一张表，1001~2000w在另一张表。

```
	数据库最终划分：冷数据并不放到mysql里，mysql主要用来做关联查询。像日志最后也会放到es里。
```

​		缺点：可能存在热点数据，造成数据倾斜，数据库压力分摊不均匀。

​	2.hash分片：

​		对关键字进行取模，表示为hash(id)%N,得到余数i，根据i的不同，将订单存储到对应编号	的数据库里。		

​		hash分片的缺点：集群的伸缩性支持上存在问题，节点增加和减少时会出现重新分配的情况。

​		改进：使用一致性hash算法。可以有效地支持集群的动态伸缩。

​	分表的缺点：给查询带来了苦难。连表查询，等都会有问题。	

​	3.查表分片

​		通过数据库查表，确定数据的分片位置。全靠人为来分配。查询前先查询表，了解数据在哪个分片里。

​	缺点：![image-20240624224647502](C:\Users\19116\AppData\Roaming\Typora\typora-user-images\image-20240624224647502.png)

​	

